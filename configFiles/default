# user  nginx; # 프로세스의 실행되는 권한. 보안상 root를 사용하지 않습니다.
# worker_processes  1;
# error_log  /var/log/nginx/error.log warn;
# pid        /var/run/nginx.pid;

# events {
#     worker_connections  1024;
# }

# URL 리디렉션은 기존 URL을 다른 URL과 연결 지어 방문자와 Google 검색에 페이지의
# 위치가 새로 지정되었음을 효과적으로 알리는 방법입니다.
# 리디렉션은 다음 상황에서 특히 유용합니다.
# 사이트를 새로운 도메인으로 옮기고 사이트 이전을 최대한 원활하게 진행하고자 하는 경우
# 사용자가 여러 다른 URL을 통해 사이트에 액세스하는 경우: 예를 들어, http://example.com/home, http://home.example.com 또는 http://www.example.com과 같이 여러 방법으로 홈페이지에 액세스할 수 있다면 이러한 URL 중 하나를 선호(표준)하는 목적지로 선택하고 301 리디렉션을 사용하여 다른 URL에서 선호하는 URL로 트래픽을 전송하는 것이 좋습니다.
# 두 웹사이트를 통합하면서 이전 URL 링크가 정확한 페이지로 리디렉션되게 하려는 경우
# 페이지를 삭제하여 사용자를 새 페이지로 유도하려는 경우



##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
	listen 80 default_server;
	listen [::]:80 default_server;

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	root /var/www/html;

	# Add index.php to the list if you are using PHP
	index index.html index.htm index.nginx-debian.html;

	server_name _;

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ =404;
	}

	# pass PHP scripts to FastCGI server
	#
	#location ~ \.php$ {
	#	include snippets/fastcgi-php.conf;
	#
	#	# With php-fpm (or other unix sockets):
	#	fastcgi_pass unix:/run/php/php7.3-fpm.sock;
	#	# With php-cgi (or other tcp sockets):
	#	fastcgi_pass 127.0.0.1:9000;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}
